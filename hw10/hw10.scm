(define (accumulate combiner start n term)
  (if (= 1 n)
       (combiner start (term 1))
       (combiner (term n) (accumulate combiner start (- n 1) term))
  )
)

(define (accumulate-tail combiner start n term)
  (if (= 1 n)
      (combiner start (term 1))
      (accumulate-tail combiner (combiner (term n) start) (- n 1) term)
  )
)

(define (partial-sums stream)
  (define (helper n stream)
             (if (null? stream)
             ()
            (cons-stream (+ n (car stream)) (helper (+ n (car stream)) (cdr-stream stream)))
            )
  )
  (helper 0 stream)
)

(define (rle s)
  (define (helper n cur s)
          (if (null? s)
               (cons-stream (list cur n) s)
               (if (= (car s) cur)
                (helper (+ n 1) cur (cdr-stream s))
                (cons-stream (list cur n) s)
                )
         )
  )
  (if (null? s)
       nil
       (cons-stream (car (helper 0 (car s) s)) (rle (cdr-stream (helper 0 (car s) s))))
  )
)
